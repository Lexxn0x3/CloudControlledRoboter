name: Build and Release Binaries

on:
  push:
    branches:
      - main
jobs:
  build-rust:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: x86_64-unknown-linux-gnu
          override: true

      - name: Create custom target directory
        run: mkdir -p build/release

      - name: Build Rust Binary
        run: RUSTFLAGS='-C target-feature=+crt-static' cargo build --release --manifest-path TcpBroker/Broker/Cargo.toml --target x86_64-unknown-linux-gnu --target-dir ./build/release/

      - name: Upload Rust Binary as Artifact
        uses: actions/upload-artifact@v2
        with:
          name: rust-binary
          path: build/release/x86_64-unknown-linux-gnu/release/Broker
          
      - name: List contents of the release directory
        run: ls -R build/release
          
  build-go:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.x'
      
      - name: Build Go Binary
        run: |
          GOOS=linux GOARCH=arm64 go build -o mainsendergo
        working-directory: mainsendergo

      - name: Upload Go Binary as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: mainsendergo
          path: mainsendergo
  create-release:
    needs: [build-rust, build-go]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
    
      - name: Download all artifacts
        uses: actions/download-artifact@v2
        
      - name: Calculate new tag
        id: newtag
        run: |
          git fetch --tags
          latestTag=$(git tag -l | sort -V | tail -n1)
          echo "Latest tag: $latestTag"
          # Split the tag into major, minor, and patch numbers
          IFS='.' read -ra VERSION <<< "${latestTag//v/}"
          MAJOR="${VERSION[0]}"
          MINOR="${VERSION[1]}"
          PATCH="${VERSION[2]}"
          # Increment the patch version
          NEW_PATCH=$(($PATCH + 1))
          newTag="v$MAJOR.$MINOR.$NEW_PATCH"
          echo "New tag: $newTag"
          echo "::set-output name=tag::$newTag"
        shell: bash

      - name: Push new tag
        env:
          GITHUB_TOKEN: ${{ secrets.MY_PAT }}  # Replace with your secret name
        run: |
          git tag ${{ steps.newtag.outputs.tag }}
          git push https://${MY_PAT}@github.com/${{ github.repository }} ${{ steps.newtag.outputs.tag }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.MY_PAT }}  # replace with your secret name
        with:
          tag_name: ${{ steps.newtag.outputs.tag }}
          release_name: Release ${{ steps.newtag.outputs.tag }}
          draft: false
          prerelease: false

      - name: Upload Rust Binary to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.MY_PAT }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./your-rust-binary-name
          asset_name: your-rust-binary-name
          asset_content_type: application/octet-stream

      - name: Upload Go Binary to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.MY_PAT }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./my-go-binary
          asset_name: my-go-binary
          asset_content_type: application/octet-stream
