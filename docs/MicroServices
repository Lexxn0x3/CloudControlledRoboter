title: Micro Services
layout: default
has_children: true
nav_order: 7
---

# Microservice Architecture Overview

Our microservice architecture is designed to handle real-time data streams from various sensors, including cameras and LiDAR, process this data, and distribute it to other services within our ecosystem. Below is an outline of the architecture components and their roles:

## Core Components

### Data Ingestion Service
- **Purpose**: Acts as the entry point for sensor data streams.
- **Technologies**:
  - `asyncio` and `sockets` for handling TCP connections in Python.
  - `confluent-kafka` for integrating with Kafka as a message broker.
- **Functionality**:
  - Listens for incoming data on specified TCP ports.
  - Processes and forwards the data to Kafka topics.

### Kafka Message Broker
- **Purpose**: Serves as a central hub for data streams, providing publish-subscribe capabilities.
- **Functionality**:
  - Decouples data producers (sensors) from consumers (other microservices).
  - Ensures reliable delivery of messages and enables real-time data streaming.

### AI Processing Service (example)
- **Purpose**: Consumes data from Kafka and applies AI models for analysis and decision-making.
- **Technologies**:
  - TensorFlow or PyTorch for machine learning computations.
- **Functionality**:
  - Performs tasks such as object detection, pathfinding, and predictive analytics.

### Pathfinding Service (example)
- **Purpose**: Generates optimal paths for navigation based on processed data.
- **Technologies**:
  - A* or D* algorithms for path calculation.
- **Functionality**:
  - Subscribes to relevant Kafka topics to receive processed sensor data.
  - Calculates and publishes navigation paths back to Kafka.

### Client Communication Service
- **Purpose**: Interfaces with the Electron frontend application.
- **Technologies**:
  - WebSockets or gRPC for bi-directional communication.
- **Functionality**:
  - Sends real-time data updates to the Electron app.
  - Receives user commands and forwards them to appropriate services.

## Supporting Components

### Containerization with Docker
- Encapsulates each service into its own container, ensuring consistent environments.

### Orchestration with Kubernetes (maybe)
- Manages container deployment, scaling, and networking.

### Continuous Integration and Deployment (CI/CD) (maybe)
- Automates testing and deployment using Jenkins or GitHub Actions.

## Conclusion

This microservice architecture is designed to be scalable, resilient, and flexible, allowing for independent development and deployment of services, ease of scaling, and robustness in handling data streams.
